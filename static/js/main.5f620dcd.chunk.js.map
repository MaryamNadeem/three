{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["console","log","OrbitControls","generatePlane","planeMesh","geometry","dispose","THREE","world","plane","width","height","widthSegments","heightSegments","array","attributes","position","i","length","x","y","z","Math","random","originalPosition","colors","count","push","setAttribute","Float32Array","gui","dat","add","onChange","raycaster","scene","camera","window","innerWidth","innerHeight","renderer","setSize","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","planeGeometry","planeMaterial","side","flatShading","vertexColors","light","set","backLight","mouse","undefined","frame","animate","requestAnimationFrame","render","cos","sin","needsUpdate","setFromCamera","intersects","intersectObject","color","object","setX","face","a","setY","setZ","b","c","initialColor","r","g","hoverColor","gsap","to","onUpdate","addEventListener","e","clientX","clientY","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f620dcd.chunk.js","sourcesContent":["import './App.css';\nimport * as THREE from 'three';\nimport * as dat from 'dat.gui';\nimport gsap from 'gsap';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { MeshStandardMaterial } from 'three';\n\nconsole.log(OrbitControls);\n\nconst generatePlane = () => {\n  planeMesh.geometry.dispose(); // this gets rid of the geometry\n  planeMesh.geometry = new THREE.PlaneGeometry(\n    world.plane.width,\n    world.plane.height,\n    world.plane.widthSegments,\n    world.plane.heightSegments\n  );\n  const { array } = planeMesh.geometry.attributes.position;\n\n  for (let i = 0; i < array.length; i += 3) {\n    const x = array[i];\n    const y = array[i + 1];\n    const z = array[i + 2];\n    array[i] = x + (Math.random() - 0.5) * 3;\n    array[i + 1] = y + (Math.random() - 0.5) * 3;\n    array[i + 2] = z + (Math.random() - 0.5) * 5;\n  }\n\n  planeMesh.geometry.attributes.position.originalPosition =\n    planeMesh.geometry.attributes.position.array;\n  const colors = [];\n  for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\n    colors.push(0, 0.19, 0.4);\n  }\n\n  planeMesh.geometry.setAttribute(\n    'color',\n    new THREE.BufferAttribute(new Float32Array(colors), 3)\n  );\n};\n\nconst gui = new dat.GUI();\nconst world = {\n  plane: { width: 400, height: 400, widthSegments: 50, heightSegments: 50 }\n};\ngui.add(world.plane, 'width', 1, 500).onChange(generatePlane);\ngui.add(world.plane, 'height', 1, 500).onChange(generatePlane);\ngui.add(world.plane, 'widthSegments', 1, 100).onChange(generatePlane);\ngui.add(world.plane, 'heightSegments', 1, 100).onChange(generatePlane);\n\n// a little laser pointer that points to the three d space\n// it tells us weather the pointer is touching something or not\nconst raycaster = new THREE.Raycaster();\nconst scene = new THREE.Scene();\n// field of view is a value in degree so if we want wide angle view we give more degree\n// second argument is aspect ratio\n// near clipping how close does an object need to be before clipping out\n//far clipping place\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\n//canvas element that runs webgl\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\n// removed jagged edges\nrenderer.setPixelRatio(window.devicePixelRatio);\ndocument.body.appendChild(renderer.domElement);\n// this is used to click and drag on the screen\nnew OrbitControls(camera, renderer.domElement);\n\n// we need geometry(wireframe) and material which we combine to make a mesh to\n// put in the three js scene\n\nconst planeGeometry = new THREE.PlaneGeometry(\n  world.plane.width,\n  world.plane.height,\n  world.plane.widthSegments,\n  world.plane.heightSegments\n);\nconst planeMaterial = new THREE.MeshPhongMaterial({\n  side: THREE.DoubleSide,\n  flatShading: THREE.FlatShading,\n  vertexColors: true\n});\nconst planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\nscene.add(planeMesh);\n\ncamera.position.z = 50;\n\ngeneratePlane();\n// takes color and intensity of light\nconst light = new THREE.DirectionalLight(0xffffff, 1);\nlight.position.set(0, 1, 1);\nscene.add(light);\nconst backLight = new THREE.DirectionalLight(0xffffff, 1);\nbackLight.position.set(0, 0, -1);\nscene.add(backLight);\n\nconst mouse = { x: undefined, y: undefined };\n\nlet frame = 0;\nconst animate = () => {\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n  // planeMesh.rotation.x += 0.01;\n  frame += 0.01;\n\n  const { array, originalPosition } = planeMesh.geometry.attributes.position;\n  for (let i = 0; i < array.length; i += 3) {\n    //cos funtion returns a value from -1 to 1\n    // we have to make match.cos much smaller bevause the plane is moving across teh screen\n    array[i] =\n      originalPosition[i] + Math.cos(frame + (Math.random() - 0.5)) * 0.003;\n    array[i + 1] =\n      originalPosition[i + 1] + Math.sin(frame + (Math.random() - 0.5)) * 0.003;\n  }\n  planeMesh.geometry.attributes.position.needsUpdate = true;\n  raycaster.setFromCamera(mouse, camera);\n  // we send in the object we want to know is intersecting\n  const intersects = raycaster.intersectObject(planeMesh);\n  if (intersects.length > 0) {\n    // first set ka x set kar rae hain to zero\n    const { color } = intersects[0].object.geometry.attributes;\n\n    //vertice 1\n    color.setX(intersects[0].face.a, 0.1);\n    color.setY(intersects[0].face.a, 0.5);\n    color.setZ(intersects[0].face.a, 1);\n\n    // vertice 2\n    color.setX(intersects[0].face.b, 0.1);\n    color.setY(intersects[0].face.b, 0.5);\n    color.setZ(intersects[0].face.b, 1);\n\n    // vertice 3\n    color.setX(intersects[0].face.c, 0.1);\n    color.setY(intersects[0].face.c, 0.5);\n    color.setZ(intersects[0].face.c, 1);\n    color.needsUpdate = true;\n\n    const initialColor = { r: 0, g: 0.19, b: 0.4 };\n    const hoverColor = { r: 0.1, g: 0.5, b: 1 };\n    gsap.to(hoverColor, {\n      r: initialColor.r,\n      g: initialColor.g,\n      b: initialColor.b,\n      onUpdate: () => {\n        //vertice 1\n        color.setX(intersects[0].face.a, hoverColor.r);\n        color.setY(intersects[0].face.a, hoverColor.g);\n        color.setZ(intersects[0].face.a, hoverColor.b);\n\n        // vertice 2\n        color.setX(intersects[0].face.b, hoverColor.r);\n        color.setY(intersects[0].face.b, hoverColor.g);\n        color.setZ(intersects[0].face.b, hoverColor.b);\n\n        // vertice 3\n        color.setX(intersects[0].face.c, hoverColor.r);\n        color.setY(intersects[0].face.c, hoverColor.g);\n        color.setZ(intersects[0].face.c, hoverColor.b);\n        color.needsUpdate = true;\n      }\n    });\n  }\n};\n\nanimate();\n\nwindow.addEventListener('mousemove', e => {\n  mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n  // we need to use raycaster whcih requires normalized coordinates which there are not\n  // whenever our mouse is in the middle of the screen for three js that point is 0,0\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Maryam Nadeem</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}